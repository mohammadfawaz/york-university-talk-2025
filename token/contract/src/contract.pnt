storage {
    // A map from account (addresses) to token balances 
    balances: (b256 => int),
}

// This is the address of the account that is allow to mint
const MINTER = 0x1ECBB0067FC057261A6B199A0F121B5CD653B93DE9195CA5F836CE0D4D2A6E21;

type Secp256k1Signature = { b256, b256, int };

predicate Mint( 
    // Address to mint to
    to: b256,
    // Amount of tokens to mint
    amount: int,
    // Signature over `to` and `amount`
    signature: Secp256k1Signature,
    // Read the current balance of `to`
) {
    let balance = mut storage::balances[to];

    // The receiver must also be the minter
    constraint to == MINTER;

    if balance == nil {
        // If the balance of `to` hasn't been set before, then set it to `amount`
        constraint balance' == amount;
    } else {
        // Otherwise, increment it by `amount`
        constraint balance' == balance + amount;
    }

    // Now, validate the signature 
    constraint @validate_signature(signature; to; { to, amount });
}

predicate Transfer(
    // Address of the token sender
    from: b256,
    // Address to transfer the tokens to
    to: b256,
    // Amount of tokens to transfer 
    amount: int,
    // Signature over `from`, `to`, and `amount`
    signature: Secp256k1Signature,
) {
    // Read the current balances of `from` and `to`
    let from_balance = mut storage::balances[from];
    let to_balance = mut storage::balances[to];

    // Ensure the amount to transfer is at least 1
    constraint amount >= 1;

    // Also ensure that `from` has enough tokens to transfer 
    constraint from_balance >= amount;

    // Now, decrement the balance of `from` by `amount`
    constraint from_balance - from_balance' == amount;

    if to_balance == nil {
        // If the balance of `to` hasn't been set before, then set it to `amount`
        constraint to_balance' == amount;
    } else {
        // Otherwise, increment it by `amount`
        constraint to_balance' == to_balance + amount;
    }

    // Now, validate the signature 
    constraint @validate_signature(signature; from; { from, to, amount });
}

macro @validate_signature($signature, $key, $data) {
    __sha256(__recover_secp256k1(__sha256($data), $signature)) == $key
}
